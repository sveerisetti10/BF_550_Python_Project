import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import skbio 
import seaborn as sns
sns.set()
import scipy.stats as stats
# PCA imports
from sklearn.decomposition import PCA


#We can use Pandas in order to import the file
data = pd.read_csv('/Users/sveerisetti/Desktop/Boston_University/Semester2/BF_550_Python/Final_Project/Bee_data/CSV_PCoA_Data/Unweighted_PCOA_Data.csv')
data

#We want to make our rownames equivalent to the Gene Name so that we can pass the dataframe through the PCA value function.
data = data.set_index("Gene")
data



#Next we want to find out the Principal Component Analysis
pcoa_values = skbio.stats.ordination.pcoa(data.values)
pc_plot_coordinates = pcoa_values.samples[['PC1', 'PC2']]
pc_plot_coordinates


#We can use Matplotlib in order to create our scatter plot (PCA Plot)
#Keep in mind this is a very raw scatter plot. We have NOT grouped based on control/treatment or days passed since experiment started. 
plt.scatter(pcoa_values.samples['PC1'], pcoa_values.samples['PC2'])

#Next we want to filter our data. The two main umbrellas of groups here are Treated and Control groups. These can futher be subcategorized based on
#days passed since experiment beginning
    
data2 = pd.read_csv('/Users/sveerisetti/Desktop/Boston_University/Semester2/BF_550_Python/Final_Project/Bee_data/CSV_PCoA_Data/Unweighted_PCOA_Data.csv')
data2

# Here we create a list of our conditions so that we can group our data when we plot 
conditions = [
    (data2['Gene'].str.contains("HC") & data2['Gene'].str.contains("D3")),
    (data2['Gene'].str.contains("HC") & data2['Gene'].str.contains("D5")),
    (data2['Gene'].str.contains("HC") & data2['Gene'].str.contains("D7")),
    (data2['Gene'].str.contains("HT") & data2['Gene'].str.contains('D3')), 
    (data2['Gene'].str.contains("HT") & data2['Gene'].str.contains('D5')),
    (data2['Gene'].str.contains("HT") & data2['Gene'].str.contains('D7')),
    (data2['Gene'].str.contains("HT") & data2['Gene'].str.contains('H0')),
    (data2['Gene'].str.contains("HC") & data2['Gene'].str.contains('H0'))
    
    ]

# create a list of the values we want to assign for each condition
values = ["Control- Post Day 3", "Control- Post Day 5", "Control- Post Day 7", "Treatment- Post Day 3", "Treatment- Post Day 5", "Treatment- Post Day 7",
         'Treatment- Post Day 0', 'Control- Post Day 0']

# create a new column and use np.select to assign values to it using our lists as arguments
data2['Group'] = np.select(conditions, values)
data2

#Now we need to extract the Group column and join it with the data df, which has all of the PCA coordinates 
extracted_col = data2["Group"]
extracted_col

pc_plot_coordinates['Group'] = data2['Group'].values
pc_plot_coordinates


# Here we create a list of our conditions so that we can group our data when we plot 
conditions2 = [
    (data2['Gene'].str.contains("HC") | data2['Gene'].str.contains('P')),
    (data2['Gene'].str.contains("HT") )  
    ]

# create a list of the values we want to assign for each condition
values2 = ['Control', "Treated"]

# create a new column and use np.select to assign values to it using our lists as arguments
data2['Variable'] = np.select(conditions2, values2)

#Now we need to extract the Group column and join it with the data df, which has all of the PCA coordinates 
extracted_col2 = data2["Variable"]
extracted_col2

pc_plot_coordinates['Variable'] = data2['Variable'].values
pc_plot_coordinates

#pc_plot_coordinates.to_csv('/Users/sveerisetti/Desktop/hello.csv')











